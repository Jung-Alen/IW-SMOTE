import CSELM as ce
import pandas as pd
import numpy as np
class SMOTE_CSELM():
    def __init__(self, lamda=100,  thres=0.5, k_neighbor=5, divide_times=2, gen_times=1):
        self.lamda = lamda;
        self.thres = thres;
        self.k_neighbor = k_neighbor;
        self.divide_times = divide_times;
        self.gen_times = gen_times;

    def sample(self, data, target, test):
        self.data = data
        self.target = target
        self.test = test
        df = pd.DataFrame(self.data)
        df[len(df.columns)] = self.target
        x_x = df
        m, n = len(x_x), len(x_x.columns)
        z = x_x[x_x[n - 1] == 1]  # acquire the minority set
        p = x_x[x_x[n - 1] == -1]  # acquire the majority set
        oversampler = sv.SMOTE(proportion=self.balance)
        X_samp, y_samp = oversampler.sample(np.array(df.iloc[:, 0:len(df.columns) - 1]),
                                            np.array(df[len(df.columns) - 1]))
        syn = pd.DataFrame(X_samp)
        syn[len(syn.columns)] = y_samp
        syn = pd.cancat([z,p,syn])
        syn = syn.drop_duplicates(keep=False)
        cse = ce.ELM(z.iloc[:,:n-1], z.iloc[:,:n-1], syn.iloc[:,:n-1], 100)
        cse.classifisor_train(z[n-1].append(p[n-1]).append(syn[n-1]))
        return  cse.classifisor_test(test)
